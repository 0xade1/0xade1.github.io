<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>picoCTF on Poney Island</title><link>https://0xade1.github.io/categories/picoctf/</link><description>Recent content in picoCTF on Poney Island</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 17 Aug 2022 03:42:29 +0800</lastBuildDate><atom:link href="https://0xade1.github.io/categories/picoctf/index.xml" rel="self" type="application/rss+xml"/><item><title>PicoCTF2019 - Cryptography</title><link>https://0xade1.github.io/posts/2022/08/picoctf2019-cryptography/</link><pubDate>Wed, 17 Aug 2022 03:42:29 +0800</pubDate><guid>https://0xade1.github.io/posts/2022/08/picoctf2019-cryptography/</guid><description>The Numbers 1 2 tbl = [16,9,3,15,3,20,6,20,8,5,14,21,13,2,5,18,19,13,1,19,15,14] print(&amp;#34;picoCTF{%s}&amp;#34; % &amp;#39;&amp;#39;.join([chr(x+96) for x in tbl[7:]])) Easy1 Cyberchef: https://cyberchef.org/#recipe=Vigen%C3%A8re_Decode('SOLVECRYPTO')&amp;amp;input=VUZKS1hRWlFVTkI
logon sign in with joe:joe with developer tools, look at the cookies change admin cookie from False to True reload the page 1 2 curl -Ls --cookie &amp;#34;admin=True&amp;#34; https://jupiter.challenges.picoctf.org/problem/44573/flag | grep pico | cut -d&amp;#39;&amp;gt;&amp;#39; -f5 | cut -d&amp;#39;&amp;lt;&amp;#39; -f1 13 echo &amp;quot;cvpbPGS{abg_gbb_onq_bs_n_ceboyrz}&amp;quot; | tr &amp;quot;[a-zA-Z]&amp;quot; &amp;quot;[n-za-mN-ZA-M]&amp;quot; caesar caesar=$(curl -Ls https://jupiter.challenges.picoctf.org/static/7d707a443e95054dc4cf30b1d9522ef0/ciphertext) echo $caesar | cut -d'{' -f2 | cut -d'}' -f1 Cyberchef: https://cyberchef.</description></item><item><title>PicoCTF2019 - Forensics</title><link>https://0xade1.github.io/posts/2022/08/picoctf2019-forensics/</link><pubDate>Wed, 17 Aug 2022 03:42:29 +0800</pubDate><guid>https://0xade1.github.io/posts/2022/08/picoctf2019-forensics/</guid><description>Glory of the Garden strings garden.jpg | grep pico xxd garden.jpg | tail So Meta curl -Ls https://jupiter.challenges.picoctf.org/static/916b07b4c87062c165ace1d3d31ef655/pico_img.png | exiftool - | grep pico | awk '{print $3}' shark on wire 1 Download pcap open with Wireshark select filter udp.stream eq 6 Follow UDP stream 1 tshark -q -r capture.pcap -z follow,udp,raw,6 | egrep &amp;#34;^[0-9]&amp;#34; | xxd -r -p We can also iterate over every udp streams:
1 2 3 4 for stream in `tshark -q -r capture.</description></item><item><title>PicoCTF2019 - General Skills</title><link>https://0xade1.github.io/posts/2022/08/picoctf2019-general-skills/</link><pubDate>Wed, 17 Aug 2022 03:42:29 +0800</pubDate><guid>https://0xade1.github.io/posts/2022/08/picoctf2019-general-skills/</guid><description>Lets Warm Up 1 print(&amp;#34;picoCTF{%s}&amp;#34; % (chr(int(&amp;#39;70&amp;#39;, 16)))) Warmed Up 1 print(&amp;#34;picoCTF{%s}&amp;#34; % int(&amp;#39;3d&amp;#39;, 16)) 2Warm 1 print(&amp;#34;picoCTF{%s}&amp;#34; % &amp;#34;{0:b}&amp;#34;.format(42)) what s a netcat? nc jupiter.challenges.picoctf.org 41120 | grep pico strings it curl -sL https://jupiter.challenges.picoctf.org/static/fae9ac5267cd6e44124e559b901df177/strings | strings | grep pico Bases echo &amp;quot;bDNhcm5fdGgzX3IwcDM1&amp;quot; | base64 -d | awk '{printf &amp;quot;picoCTF{%s}\n&amp;quot;, $1}' First Grep curl -Ls https://jupiter.challenges.picoctf.org/static/515f19f3612bfd97cd3f0c0ba32bd864/file | grep pico Based 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #!</description></item><item><title>PicoCTF2019 - Reverse Engineering</title><link>https://0xade1.github.io/posts/2022/08/picoctf2019-reverse-engineering/</link><pubDate>Wed, 17 Aug 2022 03:42:29 +0800</pubDate><guid>https://0xade1.github.io/posts/2022/08/picoctf2019-reverse-engineering/</guid><description>vault-door-training grep password.equals VaultDoorTraining.java | cut -d'&amp;quot;' -f2 | awk '{printf &amp;quot;picoCTF{%s}\n&amp;quot;, $1}' vault-door-1 flag=$( curl -sL https://jupiter.challenges.picoctf.org/static/87e103a8db01087de9ccf5a7a022ddf8/VaultDoor1.java | grep charAt | cut -d'(' -f2 | sort -n | cut -d&amp;quot;'&amp;quot; -f2 | tr -d &amp;quot;\n&amp;quot; ) echo &amp;quot;picoCTF{$flag}&amp;quot; asm1 This is how the stack looks like after the prolog:
| old ebp | | ret | &amp;lt;-- ebp+4 | 0x8be | &amp;lt;-- ebp+8 Lets audit the program with this doc as a reference:</description></item><item><title>PicoCTF2019 - Web-Exploitation</title><link>https://0xade1.github.io/posts/2022/08/picoctf2019-web-exploitation/</link><pubDate>Wed, 17 Aug 2022 03:42:29 +0800</pubDate><guid>https://0xade1.github.io/posts/2022/08/picoctf2019-web-exploitation/</guid><description>Insp3ct0r for i in &amp;quot;&amp;quot; mycss.css myjs.js ; do curl -s https://jupiter.challenges.picoctf.org/problem/9670/$i | grep flag | cut -d':' -f2 | cut -d' ' -f2 | tr -d &amp;quot;\n&amp;quot; ; done &amp;amp;&amp;amp; echo where are the robots URL=https://jupiter.challenges.picoctf.org/problem/56830/ page=$(curl -Ls $URL/robots.txt | grep Disallow | cut -d' ' -f2) curl -Ls $URL/$page | grep picoCTF | cut -d'&amp;gt;' -f2 | cut -d'&amp;lt;' -f1 logon sign in with joe:joe with developer tools, look at the cookies change admin cookie from False to True reload the page 1 2 curl -Ls --cookie &amp;#34;admin=True&amp;#34; https://jupiter.</description></item><item><title>picoCTF 2021 - Binary Exploitation</title><link>https://0xade1.github.io/posts/2021/08/picoctf-2021-binary-exploitation/</link><pubDate>Mon, 16 Aug 2021 00:00:00 +0000</pubDate><guid>https://0xade1.github.io/posts/2021/08/picoctf-2021-binary-exploitation/</guid><description>Stonks There is a format-string vulnerability.
(echo 1; for i in {1..50}; do echo -n &amp;quot;%${i}\$08x&amp;quot; ; done ; echo) | nc mercury.picoctf.net 6989 There is some ASCII characters in the output, so we can convert from hex the output to read the string
We find the string but we have the wrong Endianness ocip{FTC0l_I4_t5m[..SNIP..]..}
With Cyberchef it is easy, simply click here to view the solution.
in python3, it is more tricky:</description></item><item><title>picoCTF 2021 - Cryptography</title><link>https://0xade1.github.io/posts/2021/08/picoctf-2021-cryptography/</link><pubDate>Mon, 16 Aug 2021 00:00:00 +0000</pubDate><guid>https://0xade1.github.io/posts/2021/08/picoctf-2021-cryptography/</guid><description>Mod 26 1 echo &amp;#34;cvpbPGS{arkg_gvzr_V&amp;#39;yy_gel_2_ebhaqf_bs_ebg13_hyLicInt}&amp;#34; | tr &amp;#39;[n-za-m]&amp;#39; &amp;#39;[a-z]&amp;#39; | tr &amp;#39;[N-ZA-M]&amp;#39; &amp;#39;[A-Z]&amp;#39; Mind your Ps and Qs Decrypt my super sick RSA: c: 861270243527190895777142537838333832920579264010533029282104230006461420086153423 n: 1311097532562595991877980619849724606784164430105441327897358800116889057763413423 e: 65537 if n is small then it can be factorized on factordb.com
FactorDB is also available in python with pip3 install factordb-pycli:
1 2 3 4 5 6 7 from factordb.factordb import FactorDB n = 1311097532562595991877980619849724606784164430105441327897358800116889057763413423 f = FactorDB(n) f.connect() p, q = f.</description></item><item><title>picoCTF 2021 - Forensics</title><link>https://0xade1.github.io/posts/2021/08/picoctf-2021-forensics/</link><pubDate>Mon, 16 Aug 2021 00:00:00 +0000</pubDate><guid>https://0xade1.github.io/posts/2021/08/picoctf-2021-forensics/</guid><description>information 1 exiftool cat.jpg | grep License | awk &amp;#39;{print $3}&amp;#39; | base64 -d Matryoshka doll The downloaded file is NOT a jpg, it is a PNG:
file dolls.jpg dolls.jpg: PNG image data, 594 x 1104, 8-bit/color RGBA, non-interlaced Zsteg has found a hidden ZIP file, at the end of the image:
zsteg dolls.jpg [?] 379138 bytes of extra data after image end (IEND), offset = 0x4286c extradata:0 .. file: Zip archive data, at least v2.</description></item><item><title>picoCTF 2021 - General Skills</title><link>https://0xade1.github.io/posts/2021/08/picoctf-2021-general-skills/</link><pubDate>Mon, 16 Aug 2021 00:00:00 +0000</pubDate><guid>https://0xade1.github.io/posts/2021/08/picoctf-2021-general-skills/</guid><description>Obediant Cat 1 curl -L https://mercury.picoctf.net/static/0e428b2db9788d31189329bed089ce98/flag Python Wrangling 1 cat pw.txt | python3 ende.py -d flag.txt.en Wave a flag 1 strings warm| grep -i pico Nice netcat 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 &amp;gt;&amp;gt;&amp;gt; import pwn &amp;gt;&amp;gt;&amp;gt; host, port = &amp;#39;mercury.picoctf.net&amp;#39;, 21135 &amp;gt;&amp;gt;&amp;gt; s = pwn.remote(host, port) &amp;gt;&amp;gt;&amp;gt; prompt = s.recv() &amp;gt;&amp;gt;&amp;gt; prompt &amp;#39;112 \n105 \n99 \n111 \n67 \n84 \n70 \n123 \n103 \n48 \n48 \n100 \n95 \n107 \n49 \n116 \n116 \n121 \n33 \n95 \n110 \n49 \n99 \n51 \n95 \n107 \n49 \n116 \n116 \n121 \n33 \n95 \n97 \n102 \n100 \n53 \n102 \n100 \n97 \n52 \n125 \n10 \n&amp;#39; &amp;gt;&amp;gt;&amp;gt; prompt.</description></item><item><title>picoCTF 2021 - Reverse Engineering</title><link>https://0xade1.github.io/posts/2021/08/picoctf-2021-reverse-engineering/</link><pubDate>Mon, 16 Aug 2021 00:00:00 +0000</pubDate><guid>https://0xade1.github.io/posts/2021/08/picoctf-2021-reverse-engineering/</guid><description>Transformation Auditing the provided piece of code (below), we can reverse engineer and identify some form of custom encoding:
The encoding works two bytes at a time because of range(.., 2). So we have to read 16bits at a time. Every two bytes, each byte are converted in integer value with ord First byte is multiplied by 256 with &amp;lt;&amp;lt; 8 operation, then second byte is added to the result 1 &amp;#39;&amp;#39;.</description></item><item><title>picoCTF 2021 - Web Exploitation</title><link>https://0xade1.github.io/posts/2021/08/picoctf-2021-web-exploitation/</link><pubDate>Mon, 16 Aug 2021 00:00:00 +0000</pubDate><guid>https://0xade1.github.io/posts/2021/08/picoctf-2021-web-exploitation/</guid><description>GET aHEAD curl -is -X HEAD http://mercury.picoctf.net:34561/index.php | grep flag | cut -d' ' -f2</description></item><item><title>picoCTF 2018 - Binary Exploitation</title><link>https://0xade1.github.io/posts/2019/12/picoctf-2018-binary-exploitation/</link><pubDate>Thu, 19 Dec 2019 00:54:12 +0800</pubDate><guid>https://0xade1.github.io/posts/2019/12/picoctf-2018-binary-exploitation/</guid><description>buffer-overflow-0 source: vuln.c binary: vuln The below code is vulnerable to bufferoverflow as input can be bigger then the 16 bytes buffer size
1 2 3 4 void vuln(char *input){ char buf[16]; strcpy(buf, input); } ./vuln XXXXXXXXXXXXXXXXXXXX
buffer-overflow-1 source: vuln.c binary: vuln The below code is vulnerable to overflow attack because gets cannot know in advance whether the size of the user input will be bigger then BUFSIZE
1 2 3 4 void vuln(){ char buf[BUFSIZE]; gets(buf); } With radare2, we can deduct the size of the overflow without dumping a core:</description></item><item><title>picoCTF 2018 - Cryptography</title><link>https://0xade1.github.io/posts/2019/12/picoctf-2018-cryptography/</link><pubDate>Thu, 19 Dec 2019 00:54:12 +0800</pubDate><guid>https://0xade1.github.io/posts/2019/12/picoctf-2018-cryptography/</guid><description>Crypto-warmup-1 The fastest way is pip install pycipher
1 2 3 4 5 6 7 8 pip install pycipher python2 &amp;gt;&amp;gt;&amp;gt; c = &amp;#39;llkjmlmpadkkc&amp;#39;.upper() &amp;gt;&amp;gt;&amp;gt; k = &amp;#39;thisisalilkey&amp;#39;.upper() &amp;gt;&amp;gt;&amp;gt; from pycipher import Vigenere &amp;gt;&amp;gt;&amp;gt; plaintext = Vigenere(k).decipher(c) &amp;gt;&amp;gt;&amp;gt; print plaintext SECRETMESSAGE We can also code ourselves but it takes a bit more time ;)
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 #!</description></item><item><title>picoCTF 2018 - Forensics</title><link>https://0xade1.github.io/posts/2019/12/picoctf-2018-forensics/</link><pubDate>Thu, 19 Dec 2019 00:54:12 +0800</pubDate><guid>https://0xade1.github.io/posts/2019/12/picoctf-2018-forensics/</guid><description>forensics-warmup-001 We download a zipfile with the command curl -Ok url. The -k switch allows to by-pass ssl certificates checking when downloading a file in TLS (with https). we first check the zipfile with the command file: it&amp;rsquo;s indeed effectively a zip so we can unzip and explore the content. Apparently there is an image, we open it with eog and we can observe the flag
1 2 3 4 curl -Ok https://&amp;lt;URL&amp;gt;/flag.</description></item><item><title>picoCTF 2018 - General Skills</title><link>https://0xade1.github.io/posts/2019/12/picoctf-2018-general-skills/</link><pubDate>Thu, 19 Dec 2019 00:54:12 +0800</pubDate><guid>https://0xade1.github.io/posts/2019/12/picoctf-2018-general-skills/</guid><description>grep-1 1 grep pico file net-cat 1 nc 2018shell.picoctf.com 37721 | grep pico strings 1 strings strings | grep pico The binary name is strings. The utility used to find the flag inside the binary has the same name string
pipe 1 nc 2018shell.picoctf.com 44310 | grep pico grep-2 1 ssh 0xade1@2018shell4.picoctf.com &amp;#39;grep -r pico /problems/grep-2_3_826f886f547acb8a9c3fccb030e8168d/files/&amp;#39; aca-Shell-a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ls cd secret ls rm intel* echo &amp;#39;Drop it in!</description></item><item><title>picoCTF 2018 - Reverse Engineering</title><link>https://0xade1.github.io/posts/2019/12/picoctf-2018-reverse-engineering/</link><pubDate>Thu, 19 Dec 2019 00:54:12 +0800</pubDate><guid>https://0xade1.github.io/posts/2019/12/picoctf-2018-reverse-engineering/</guid><description>Recommended resources: Assembler tutorial Register Calling conventions common-x86-calling-conventions X86_Disassembly/Calling_Conventions Wikipedia x86_64 calling convention assembly-0 The program is called with two arguments: asm0(0xc9, 0xb0), so the stack frame looks like the following: calling convention is cdecl | adress of argument2 | ebp+12 | adress of argument1 | ebp+8 | return address | ebp+4 | old ebp | &amp;lt;--- ebp nasm code source:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 .</description></item><item><title>picoCTF 2018 - Web Exploitation</title><link>https://0xade1.github.io/posts/2019/12/picoctf-2018-web-exploitation/</link><pubDate>Thu, 19 Dec 2019 00:54:12 +0800</pubDate><guid>https://0xade1.github.io/posts/2019/12/picoctf-2018-web-exploitation/</guid><description>first challenges logon explore website logon with any username and password, we are logged on and edit cookies admin=True with developper tools refresh the page and get the flag inspect-me 1 2 3 4 5 6 explore html css javascript files or use recursive wget to download website wget --recursive http://2018shell.picoctf.com:47428 grep -r flag 2018shell.picoctf.com\:47428/ 2018shell.picoctf.com:47428/mycss.css:/* I learned CSS! Here&amp;#39;s part 2/3 of the flag: ct0r_g4dget_e96dd105} */ 2018shell.picoctf.com:47428/index.html: &amp;lt;!-- I learned HTML!</description></item></channel></rss>