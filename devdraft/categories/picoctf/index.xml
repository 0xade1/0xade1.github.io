<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>picoCTF on Poney Island</title>
    <link>https://0xade1.github.io/devdraft/categories/picoctf/</link>
    <description>Recent content in picoCTF on Poney Island</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Dec 2019 00:54:12 +0800</lastBuildDate><atom:link href="https://0xade1.github.io/devdraft/categories/picoctf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>picoCTF 2018 - Binary Exploitation</title>
      <link>https://0xade1.github.io/devdraft/posts/2019/12/picoctf-2018-binary-exploitation/</link>
      <pubDate>Thu, 19 Dec 2019 00:54:12 +0800</pubDate>
      
      <guid>https://0xade1.github.io/devdraft/posts/2019/12/picoctf-2018-binary-exploitation/</guid>
      <description>buffer-overflow-0 source: vuln.c binary: vuln The below code is vulnerable to bufferoverflow as input can be bigger then the 16 bytes buffer size
1 2 3 4 void vuln(char *input){ char buf[16]; strcpy(buf, input); } ./vuln XXXXXXXXXXXXXXXXXXXX
buffer-overflow-1 source: vuln.c binary: vuln The below code is vulnerable to overflow attack because gets cannot know in advance whether the size of the user input will be bigger then BUFSIZE
1 2 3 4 void vuln(){ char buf[BUFSIZE]; gets(buf); } With radare2, we can deduct the size of the overflow without dumping a core:</description>
    </item>
    
    <item>
      <title>picoCTF 2018 - Cryptography</title>
      <link>https://0xade1.github.io/devdraft/posts/2019/12/picoctf-2018-cryptography/</link>
      <pubDate>Thu, 19 Dec 2019 00:54:12 +0800</pubDate>
      
      <guid>https://0xade1.github.io/devdraft/posts/2019/12/picoctf-2018-cryptography/</guid>
      <description>Crypto-warmup-1 The fastest way is pip install pycipher
1 2 3 4 5 6 7 8 pip install pycipher python2 &amp;gt;&amp;gt;&amp;gt; c = &amp;#39;llkjmlmpadkkc&amp;#39;.upper() &amp;gt;&amp;gt;&amp;gt; k = &amp;#39;thisisalilkey&amp;#39;.upper() &amp;gt;&amp;gt;&amp;gt; from pycipher import Vigenere &amp;gt;&amp;gt;&amp;gt; plaintext = Vigenere(k).decipher(c) &amp;gt;&amp;gt;&amp;gt; print plaintext SECRETMESSAGE We can also code ourselves but it takes a bit more time ;)
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 #!</description>
    </item>
    
    <item>
      <title>picoCTF 2018 - Forensics</title>
      <link>https://0xade1.github.io/devdraft/posts/2019/12/picoctf-2018-forensics/</link>
      <pubDate>Thu, 19 Dec 2019 00:54:12 +0800</pubDate>
      
      <guid>https://0xade1.github.io/devdraft/posts/2019/12/picoctf-2018-forensics/</guid>
      <description>forensics-warmup-001 We download a zipfile with the command curl -Ok url. The -k switch allows to by-pass ssl certificates checking when downloading a file in TLS (with https). we first check the zipfile with the command file: it&amp;rsquo;s indeed effectively a zip so we can unzip and explore the content. Apparently there is an image, we open it with eog and we can observe the flag
1 2 3 4 curl -Ok https://&amp;lt;URL&amp;gt;/flag.</description>
    </item>
    
    <item>
      <title>picoCTF 2018 - General Skills</title>
      <link>https://0xade1.github.io/devdraft/posts/2019/12/picoctf-2018-general-skills/</link>
      <pubDate>Thu, 19 Dec 2019 00:54:12 +0800</pubDate>
      
      <guid>https://0xade1.github.io/devdraft/posts/2019/12/picoctf-2018-general-skills/</guid>
      <description>grep-1 1 grep pico file net-cat 1 nc 2018shell.picoctf.com 37721 | grep pico strings 1 strings strings | grep pico The binary name is strings. The utility used to find the flag inside the binary has the same name string
pipe 1 nc 2018shell.picoctf.com 44310 | grep pico grep-2 1 ssh 0xade1@2018shell4.picoctf.com &amp;#39;grep -r pico /problems/grep-2_3_826f886f547acb8a9c3fccb030e8168d/files/&amp;#39; aca-Shell-a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ls cd secret ls rm intel* echo &amp;#39;Drop it in!</description>
    </item>
    
    <item>
      <title>picoCTF 2018 - Reversing</title>
      <link>https://0xade1.github.io/devdraft/posts/2019/12/picoctf-2018-reversing/</link>
      <pubDate>Thu, 19 Dec 2019 00:54:12 +0800</pubDate>
      
      <guid>https://0xade1.github.io/devdraft/posts/2019/12/picoctf-2018-reversing/</guid>
      <description>Recommended resources: Assembler tutorial Register Calling conventions common-x86-calling-conventions X86_Disassembly/Calling_Conventions Wikipedia x86_64 calling convention assembly-0 The program is called with two arguments: asm0(0xc9, 0xb0), so the stack frame looks like the following: calling convention is cdecl | adress of argument2	|	ebp+12 | adress of argument1	|	ebp+8 | return address	|	ebp+4 | old ebp	| &amp;lt;--- ebp nasm code source:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 .</description>
    </item>
    
    <item>
      <title>picoCTF 2018 - Web Exploitation</title>
      <link>https://0xade1.github.io/devdraft/posts/2019/12/picoctf-2018-web-exploitation/</link>
      <pubDate>Thu, 19 Dec 2019 00:54:12 +0800</pubDate>
      
      <guid>https://0xade1.github.io/devdraft/posts/2019/12/picoctf-2018-web-exploitation/</guid>
      <description>first challenges logon explore website logon with any username and password, we are logged on and edit cookies admin=True with developper tools refresh the page and get the flag inspect-me 1 2 3 4 5 6 explore html css javascript files or use recursive wget to download website wget --recursive http://2018shell.picoctf.com:47428 grep -r flag 2018shell.picoctf.com\:47428/ 2018shell.picoctf.com:47428/mycss.css:/* I learned CSS! Here&amp;#39;s part 2/3 of the flag: ct0r_g4dget_e96dd105} */ 2018shell.picoctf.com:47428/index.html: &amp;lt;!-- I learned HTML!</description>
    </item>
    
  </channel>
</rss>
